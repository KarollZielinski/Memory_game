{"version":3,"sources":["components/Singlecard.js","App.js","index.js"],"names":["SingleCard","_ref","card","handleChoice","flipped","disabled","_jsx","className","children","_jsxs","src","alt","onClick","cardImages","matched","App","_useState","useState","_useState2","_slicedToArray","cards","setCards","_useState3","_useState4","turns","setTurns","_useState5","_useState6","choiceOne","setChoiceOne","_useState7","_useState8","choiceTwo","setChoiceTwo","_useState9","_useState10","setDisabled","shuffleCards","concat","sort","Math","random","map","_objectSpread","id","useEffect","prevCards","resetTurn","setTimeout","prevTurns","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"uQAGe,SAASA,EAAUC,GAA0C,IAAxCC,EAAID,EAAJC,KAAMC,EAAYF,EAAZE,aAAcC,EAAOH,EAAPG,QAASC,EAAQJ,EAARI,SAU/D,OACEC,cAAA,OAAMC,UAAU,OAAMC,SACtBC,eAAA,OAAKF,UAAWH,EAAU,UAAY,GAAGI,SAAA,CACvCF,cAAA,OAAKC,UAAU,QAASG,IAAKR,EAAKQ,IAAKC,IAAI,eAC3CL,cAAA,OACAC,UAAU,OACTG,IAAI,iBACJE,QAda,WACbP,GACHF,EAAaD,IAaTS,IAAI,mBCjBZ,IAAME,EAAa,CACjB,CAAE,IAAO,0BAA2BC,SAAS,GAC7C,CAAE,IAAO,0BAA4BA,SAAS,GAC9C,CAAE,IAAO,wBAA0BA,SAAS,GAC5C,CAAE,IAAO,0BAA2BA,SAAS,GAC7C,CAAE,IAAO,0BAA2BA,SAAS,GAC7C,CAAE,IAAO,yBAA0BA,SAAS,IAoF/BC,MAjFf,WACE,IAAAC,EAA0BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,EAA2BL,mBAAS,GAAEM,EAAAJ,YAAAG,EAAA,GAA9BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACvBG,EAAkCT,mBAAS,MAAKU,EAAAR,YAAAO,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,EAAkCb,mBAAS,MAAKc,EAAAZ,YAAAW,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,EAAgCjB,oBAAS,GAAMkB,EAAAhB,YAAAe,EAAA,GAAxC7B,EAAQ8B,EAAA,GAAEC,EAAWD,EAAA,GAExBE,EAAe,WACnB,IAAMA,EAAe,GAAAC,OAAIzB,EAAeA,GACtC0B,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAACxC,GAAI,OAAAyC,wBAAA,GAAUzC,GAAI,IAAE0C,GAAIJ,KAAKC,cAGpCZ,EAAa,MACbI,EAAa,MACbZ,EAASgB,GACTZ,EAAS,IAILtB,EAAe,SAACD,GACpB0B,EAAYK,EAAa/B,GAAQ2B,EAAa3B,IAIhD2C,qBAAU,WACLjB,GAAaI,IACdI,GAAY,GAETR,EAAUlB,MAAQsB,EAAUtB,KAC7BW,GAAS,SAAAyB,GACP,OAAOA,EAAUJ,KAAI,SAAAxC,GACnB,OAAIA,EAAKQ,MAAQkB,EAAUlB,IACzBiC,wBAAA,GAAWzC,GAAI,IAAEY,SAAS,IAEnBZ,QAIb6C,KAGDC,YAAW,kBAAMD,MAAa,QAGjC,CAACnB,EAAWI,IAGd,IAAMe,EAAY,WAChBlB,EAAa,MACbI,EAAa,MACbR,GAAS,SAAAwB,GAAS,OAAIA,EAAY,KAClCb,GAAY,IAMZ,OAJFS,qBAAU,WACRR,MACC,IAGC5B,eAAA,OAAKF,UAAU,MAAKC,SAAA,CAClBF,cAAA,MAAAE,SAAI,gBACJF,cAAA,UAAQM,QAASyB,EAAa7B,SAAC,aAI/BF,cAAA,OAAKC,UAAU,YAAWC,SACvBY,EAAMsB,KAAI,SAAAxC,GAAI,OACdI,cAACN,EAAU,CAETE,KAAMA,EACLC,aAAcA,EACdC,QAASF,IAAS0B,GAAa1B,IAAS8B,GAAa9B,EAAKY,QAC1DT,SAAUA,GAJPH,EAAK0C,SAQdnC,eAAA,KAAAD,SAAA,CAAG,UAAQgB,SCpFjB0B,IAASC,OACP7C,cAAC8C,IAAMC,WAAU,CAAA7C,SACfF,cAACS,EAAG,MAENuC,SAASC,eAAe,W","file":"static/js/main.50977c8f.chunk.js","sourcesContent":["import './SingleCard.css'\r\n\r\n\r\nexport default function SingleCard({card, handleChoice, flipped, disabled}){\r\n\r\n\r\nconst handleClick = () => {\r\n  if (!disabled) {\r\n    handleChoice(card)\r\n  }\r\n}\r\n\r\n\r\n  return(\r\n    <div  className=\"card\">\r\n    <div className={flipped ? \"flipped\" : \"\"}>\r\n      <img className=\"front\"  src={card.src} alt=\"card front\"/>\r\n      <img \r\n      className='back'\r\n       src=\"/img/cover.png\" \r\n       onClick={handleClick} \r\n        alt=\"card back\" />\r\n    </div>\r\n  </div>\r\n  )\r\n}","import { useEffect, useState } from 'react'\nimport './App.css'\nimport SingleCard from './components/Singlecard'\n\nconst cardImages = [\n  { \"src\": \"public/img/helmet-1.png\", matched: false },\n  { \"src\": \"public/img/potion-1.png\" , matched: false},\n  { \"src\": \"public/img/ring-1.png\" , matched: false},\n  { \"src\": \"public/img/scroll-1.png\", matched: false },\n  { \"src\": \"public/img/shield-1.png\", matched: false },\n  { \"src\": \"public/img/sword-1.png\", matched: false },\n]\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [ turns, setTurns] = useState(0) \n  const [choiceOne, setChoiceOne] = useState(null) \n  const [choiceTwo, setChoiceTwo] = useState(null) \n  const [disabled, setDisabled] = useState(false)\n\nconst shuffleCards = () => {\n  const shuffleCards = [...cardImages, ...cardImages]\n   .sort(() => Math.random() - 0.5)\n   .map((card) => ({...card, id: Math.random() }))\n\n\n  setChoiceOne(null)\n  setChoiceTwo(null)\n  setCards(shuffleCards)\n  setTurns(0)\n}\n\n//handle a choice\nconst handleChoice = (card) => {\n  choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n}\n\n//compare cards\nuseEffect(() => {\n  if(choiceOne && choiceTwo){\n    setDisabled(true)\n\n    if(choiceOne.src === choiceTwo.src){\n      setCards(prevCards => {\n        return prevCards.map(card => {\n          if (card.src === choiceOne.src){\n            return {...card, matched: true}\n          }else{\n            return card \n          }\n        })\n      })\n      resetTurn()\n    } else {\n    \n     setTimeout(() => resetTurn(), 750)\n    }\n  }\n},[choiceOne, choiceTwo])\n\n//reset choices and increase turn\nconst resetTurn = () => {\n  setChoiceOne(null)\n  setChoiceTwo(null)\n  setTurns(prevTurns => prevTurns + 1)\n  setDisabled(false)\n}\nuseEffect(() => {\n  shuffleCards()\n}, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n         <SingleCard\n          key={card.id} \n           card={card} \n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched }\n            disabled={disabled}\n           />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}